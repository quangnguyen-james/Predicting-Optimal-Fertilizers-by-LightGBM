{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":91717,"databundleVersionId":12184666,"sourceType":"competition"}],"dockerImageVersionId":31041,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/quangjames/s5e6-single-lightgbm?scriptVersionId=243689292\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-04T12:44:50.457355Z","iopub.execute_input":"2025-06-04T12:44:50.458054Z","iopub.status.idle":"2025-06-04T12:44:50.789088Z","shell.execute_reply.started":"2025-06-04T12:44:50.458008Z","shell.execute_reply":"2025-06-04T12:44:50.788098Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s5e6/sample_submission.csv\n/kaggle/input/playground-series-s5e6/train.csv\n/kaggle/input/playground-series-s5e6/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"# Import Libraries","metadata":{}},{"cell_type":"code","source":"from IPython.display import display, HTML\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold, StratifiedKFold\nimport torch","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-04T12:44:53.140658Z","iopub.execute_input":"2025-06-04T12:44:53.141642Z","iopub.status.idle":"2025-06-04T12:45:05.699807Z","shell.execute_reply.started":"2025-06-04T12:44:53.141602Z","shell.execute_reply":"2025-06-04T12:45:05.698793Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"# Check Dataset\n## Check overview dataset","metadata":{}},{"cell_type":"code","source":"train_file ='/kaggle/input/playground-series-s5e6/train.csv'\ntest_file ='/kaggle/input/playground-series-s5e6/test.csv'\ntrain_data = pd.read_csv(train_file)\ntest_data = pd.read_csv(test_file)\nprint(train_data.info())\nprint(test_data.info())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-04T12:45:28.703404Z","iopub.execute_input":"2025-06-04T12:45:28.704072Z","iopub.status.idle":"2025-06-04T12:45:30.240421Z","shell.execute_reply.started":"2025-06-04T12:45:28.704022Z","shell.execute_reply":"2025-06-04T12:45:30.239612Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 750000 entries, 0 to 749999\nData columns (total 10 columns):\n #   Column           Non-Null Count   Dtype \n---  ------           --------------   ----- \n 0   id               750000 non-null  int64 \n 1   Temparature      750000 non-null  int64 \n 2   Humidity         750000 non-null  int64 \n 3   Moisture         750000 non-null  int64 \n 4   Soil Type        750000 non-null  object\n 5   Crop Type        750000 non-null  object\n 6   Nitrogen         750000 non-null  int64 \n 7   Potassium        750000 non-null  int64 \n 8   Phosphorous      750000 non-null  int64 \n 9   Fertilizer Name  750000 non-null  object\ndtypes: int64(7), object(3)\nmemory usage: 57.2+ MB\nNone\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 250000 entries, 0 to 249999\nData columns (total 9 columns):\n #   Column       Non-Null Count   Dtype \n---  ------       --------------   ----- \n 0   id           250000 non-null  int64 \n 1   Temparature  250000 non-null  int64 \n 2   Humidity     250000 non-null  int64 \n 3   Moisture     250000 non-null  int64 \n 4   Soil Type    250000 non-null  object\n 5   Crop Type    250000 non-null  object\n 6   Nitrogen     250000 non-null  int64 \n 7   Potassium    250000 non-null  int64 \n 8   Phosphorous  250000 non-null  int64 \ndtypes: int64(7), object(2)\nmemory usage: 17.2+ MB\nNone\n","output_type":"stream"}],"execution_count":3},{"cell_type":"markdown","source":"## Define global variables","metadata":{}},{"cell_type":"code","source":"id_column = 'id'\ntarget_column = 'Fertilizer Name'\nnumeric_features = [col for col in train_data.select_dtypes(include = ['int64', 'float64']).columns\n                   if col != target_column and col != id_column]\ncategorical_features = [col for col in train_data.select_dtypes(include = ['object', 'category']).columns\n                       if col != target_column and col != id_column]\nprint(f'All numerical features are: {numeric_features}')\nprint(f'All categorical features are: {categorical_features}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-04T12:45:34.070539Z","iopub.execute_input":"2025-06-04T12:45:34.070885Z","iopub.status.idle":"2025-06-04T12:45:34.108414Z","shell.execute_reply.started":"2025-06-04T12:45:34.070862Z","shell.execute_reply":"2025-06-04T12:45:34.107315Z"}},"outputs":[{"name":"stdout","text":"All numerical features are: ['Temparature', 'Humidity', 'Moisture', 'Nitrogen', 'Potassium', 'Phosphorous']\nAll categorical features are: ['Soil Type', 'Crop Type']\n","output_type":"stream"}],"execution_count":4},{"cell_type":"markdown","source":"## Check Statistics description","metadata":{}},{"cell_type":"code","source":"print(train_data.describe(include='all'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-04T12:45:37.597797Z","iopub.execute_input":"2025-06-04T12:45:37.598108Z","iopub.status.idle":"2025-06-04T12:45:38.062132Z","shell.execute_reply.started":"2025-06-04T12:45:37.598087Z","shell.execute_reply":"2025-06-04T12:45:38.061184Z"}},"outputs":[{"name":"stdout","text":"                   id    Temparature       Humidity       Moisture Soil Type  \\\ncount   750000.000000  750000.000000  750000.000000  750000.000000    750000   \nunique            NaN            NaN            NaN            NaN         5   \ntop               NaN            NaN            NaN            NaN     Sandy   \nfreq              NaN            NaN            NaN            NaN    156710   \nmean    374999.500000      31.503565      61.038912      45.184147       NaN   \nstd     216506.495284       4.025574       6.647695      11.794594       NaN   \nmin          0.000000      25.000000      50.000000      25.000000       NaN   \n25%     187499.750000      28.000000      55.000000      35.000000       NaN   \n50%     374999.500000      32.000000      61.000000      45.000000       NaN   \n75%     562499.250000      35.000000      67.000000      55.000000       NaN   \nmax     749999.000000      38.000000      72.000000      65.000000       NaN   \n\n       Crop Type       Nitrogen      Potassium    Phosphorous Fertilizer Name  \ncount     750000  750000.000000  750000.000000  750000.000000          750000  \nunique        11            NaN            NaN            NaN               7  \ntop        Paddy            NaN            NaN            NaN        14-35-14  \nfreq       85754            NaN            NaN            NaN          114436  \nmean         NaN      23.093808       9.478296      21.073227             NaN  \nstd          NaN      11.216125       5.765622      12.346831             NaN  \nmin          NaN       4.000000       0.000000       0.000000             NaN  \n25%          NaN      13.000000       4.000000      10.000000             NaN  \n50%          NaN      23.000000       9.000000      21.000000             NaN  \n75%          NaN      33.000000      14.000000      32.000000             NaN  \nmax          NaN      42.000000      19.000000      42.000000             NaN  \n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"## Check Target column","metadata":{}},{"cell_type":"code","source":"target_values = train_data[target_column].value_counts()\ndisplay(HTML(\"<span style='color: red; font-weight: bold;'> Distribution of Target values </span>\"))\nprint(target_values)\ntotal_target_values = target_values.sum()\ndisplay(HTML(f\"<span style ='color:green; font-weight:bold'> Target values total: {total_target_values:,} </span>\"))\n\npercentages = target_values / total_target_values * 100\n# Visualization\ndisplay(HTML(\"<span style= 'color:blue; font-weight: bold'> Target values distribution visualization </span>\"))\nplt.figure(figsize=(10, 4))\nbars = plt.bar(target_values.index, target_values.values, color='cornflowerblue')\n\nfor bar, pct in zip(bars, percentages):\n    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 2000,\n             f'{pct:.1f}%', ha='center', va='bottom', fontsize=9)\n\nplt.title('Target Distribution', fontsize=14)\nplt.xlabel(f'{target_column}', fontsize=12)\nplt.ylabel('Counts', fontsize=12)\nplt.xticks(rotation=45)\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-04T12:45:40.726329Z","iopub.execute_input":"2025-06-04T12:45:40.726629Z","iopub.status.idle":"2025-06-04T12:45:41.115304Z","shell.execute_reply.started":"2025-06-04T12:45:40.726606Z","shell.execute_reply":"2025-06-04T12:45:41.114378Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<span style='color: red; font-weight: bold;'> Distribution of Target values </span>"},"metadata":{}},{"name":"stdout","text":"Fertilizer Name\n14-35-14    114436\n10-26-26    113887\n17-17-17    112453\n28-28       111158\n20-20       110889\nDAP          94860\nUrea         92317\nName: count, dtype: int64\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<span style ='color:green; font-weight:bold'> Target values total: 750,000 </span>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<span style= 'color:blue; font-weight: bold'> Target values distribution visualization </span>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":6},{"cell_type":"markdown","source":"# Data Preprocessing","metadata":{}},{"cell_type":"code","source":"# Đọc dữ liệu\ntrain_file = '/kaggle/input/playground-series-s5e6/train.csv'\ntest_file = '/kaggle/input/playground-series-s5e6/test.csv'\ntrain_data = pd.read_csv(train_file)\ntest_data = pd.read_csv(test_file)\n\n# Data preparation\ntrain_df = train_data.copy().drop('id', axis=1)\ntest_ids = test_data['id'].copy()\ntest_df = test_data.copy().drop('id', axis=1)\n\n# Hàm thêm đặc trưng\n# def add_features(df):\n#     df['Temp_Humidity'] = df['Temparature'] / (df['Humidity'] + 1e-5)\n#     df['Sum_Temp_Humidity'] = df['Temparature'] + df['Humidity']\n#     df['Temp_Moisture'] = df['Temparature'] / (df['Moisture'] + 1e-5)\n#     df['Sum_Temp_Moisture'] = df['Temparature'] + df['Moisture']\n#     df['Moisture_Humidity'] = df['Moisture'] / (df['Humidity'] + 1e-5)\n#     df['Sum_Temp_Humidity'] = df['Moisture'] + df['Humidity']\n#     df['Total_Moisture_Humidity'] = df['Temparature'] + df['Moisture'] + df['Humidity']\n    \n#     # df['Nitrogen_Potassium'] = df['Nitrogen'] / (df['Potassium'] + 1e-5)\n#     # df['Sum_Nitrogen_Potassium'] = df['Nitrogen'] + df['Potassium']\n#     # df['Nitrogen_Phosphorous'] = df['Nitrogen'] / (df['Phosphorous'] + 1e-5)\n#     # df['Sum_Nitrogen_Phosphorous'] = df['Nitrogen'] + df['Phosphorous']\n#     # df['Potassium_Phosphorous'] = df['Potassium'] / (df['Phosphorous'] + 1e-5)\n#     # df['Sum_Potassium_Phosphorous'] = df['Potassium'] + df['Phosphorous']\n#     # df['Total_Nutrients'] = df['Nitrogen'] + df['Potassium'] + df['Phosphorous']\n#     # df['Soil_Crop'] = df['Soil Type'] + \"_\" + df['Crop Type']\n#     # df['Temp_Humidity'] = df['Temparature'] * df['Humidity']    \n#     # df['Potassium_Phosphorous'] = df['Potassium'] / (df['Phosphorous'] + 1e-5)\n#     return df\n\n# train_df = add_features(train_df)\n# test_df = add_features(test_df)\n\n# Định nghĩa các biến\nid_column = 'id'\ntarget_column = 'Fertilizer Name'\nnumeric_features = [col for col in train_df.select_dtypes(include=['int64', 'float64']).columns \n                    if col != target_column and col != id_column]\ncategorical_features = [col for col in train_df.select_dtypes(include=['object']).columns \n                        if col != target_column and col != id_column]\n\n# # Outlier handling\n# def clip_outliers(df, column):\n#     q1 = df[column].quantile(0.25)\n#     q3 = df[column].quantile(0.75)\n#     iqr = q3 - q1\n#     upper_bound = q3 + 1.5 * iqr\n#     lower_bound = q1 - 1.5 * iqr\n#     df[column] = df[column].clip(lower=lower_bound, upper=upper_bound)\n#     return df\n\n# for col in numeric_features:\n#     train_df[col] = np.log1p(train_df[col])\n#     test_df[col] = np.log1p(test_df[col])\n#     train_df = clip_outliers(train_df, col)\n#     test_df = clip_outliers(test_df, col)\n\n# Kiểm tra giá trị thiếu\nprint(\"Missing values in train_df:\\n\", train_df.isnull().sum())\nprint(\"Missing values in test_df:\\n\", test_df.isnull().sum())\n\nlabel_encoders = {}\n\n# Encode categorical features\nfor col in categorical_features:\n    le = LabelEncoder()\n    train_df[col] = le.fit_transform(train_df[col])\n    test_df[col] = test_df[col].apply(lambda x: x if x in le.classes_ else le.classes_[0])\n    test_df[col] = le.transform(test_df[col])\n    label_encoders[col] = le\n\n# Encode Target column\nle_target = LabelEncoder()\ntrain_df[target_column] = le_target.fit_transform(train_df[target_column])\nlabel_encoders[target_column] = le_target\n\n# Tách đặc trưng và mục tiêu\nX = train_df.drop(target_column, axis=1)\ny = train_df[target_column]\n\n# Chia tập train thành train và validation\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Check size\nprint(f\"Columns of train: {X.columns.tolist()}\")\nprint(f\"Size of train: {X.shape}\")\nprint(f\"Size of test: {test_df.shape}\")\nprint(f\"Size of train for training: {X_train.shape}\")\nprint(f\"Size of validation for training: {X_val.shape}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-04T12:45:46.301748Z","iopub.execute_input":"2025-06-04T12:45:46.302032Z","iopub.status.idle":"2025-06-04T12:45:51.184394Z","shell.execute_reply.started":"2025-06-04T12:45:46.302012Z","shell.execute_reply":"2025-06-04T12:45:51.183651Z"}},"outputs":[{"name":"stdout","text":"Missing values in train_df:\n Temparature        0\nHumidity           0\nMoisture           0\nSoil Type          0\nCrop Type          0\nNitrogen           0\nPotassium          0\nPhosphorous        0\nFertilizer Name    0\ndtype: int64\nMissing values in test_df:\n Temparature    0\nHumidity       0\nMoisture       0\nSoil Type      0\nCrop Type      0\nNitrogen       0\nPotassium      0\nPhosphorous    0\ndtype: int64\nColumns of train: ['Temparature', 'Humidity', 'Moisture', 'Soil Type', 'Crop Type', 'Nitrogen', 'Potassium', 'Phosphorous']\nSize of train: (750000, 8)\nSize of test: (250000, 8)\nSize of train for training: (600000, 8)\nSize of validation for training: (150000, 8)\n","output_type":"stream"}],"execution_count":7},{"cell_type":"markdown","source":"# LightGBM Training","metadata":{}},{"cell_type":"code","source":"# Hàm tính MAP@3\ndef map_at_3(y_true, y_pred_prob, k=3):\n    map_scores = []\n    for true_label, pred_prob in zip(y_true, y_pred_prob):\n        top_k_indices = np.argsort(pred_prob)[::-1][:k]\n        true_label_binary = np.zeros(len(pred_prob))\n        true_label_binary[true_label] = 1\n        relevant = [1 if idx == true_label else 0 for idx in top_k_indices]\n        precisions = []\n        num_relevant = 0\n        for i, rel in enumerate(relevant):\n            if rel == 1:\n                num_relevant += 1\n                precisions.append(num_relevant / (i + 1))\n        map_scores.append(np.mean(precisions) if precisions else 0)\n    return np.mean(map_scores)\n\n# # Thiết lập KFold\n# kf = KFold(n_splits=5, shuffle=True, random_state=42)\n# Thiết lập StratifiedKFold\nkf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\n\n# Danh sách lưu trữ\ntrain_map3_scores = []\nval_map3_scores = []\nmodels = []\n\n# Lưu mô hình tốt nhất\nbest_model = None\nbest_val_map3 = 0.0\n\n# Huấn luyện với KFold\nfold = 1\nfor train_idx, val_idx in kf.split(X,y):\n    print(f\"\\nFold {fold}\")\n    \n    X_train_fold, X_val_fold = X.iloc[train_idx], X.iloc[val_idx]\n    y_train_fold, y_val_fold = y.iloc[train_idx], y.iloc[val_idx]\n    \n    # Tạo dataset cho LightGBM\n    train_data = lgb.Dataset(X_train_fold, label=y_train_fold)\n    val_data = lgb.Dataset(X_val_fold, label=y_val_fold)\n    \n    # Khởi tạo LightGBM\n    params = {\n        'objective': 'multiclass',\n        'num_class': len(le_target.classes_),\n        'boosting_type': 'gbdt',\n        'num_leaves': 50,\n        'learning_rate': 0.03,\n        'max_depth': 6,\n        'feature_fraction': 0.7,\n        'bagging_fraction': 0.7,\n        'bagging_freq': 5,\n        'verbose': -1,\n        'random_state': 42,\n        'device': 'gpu'\n    }\n    \n    # Huấn luyện\n    model = lgb.train(\n        params,\n        train_data,\n        num_boost_round=10000,\n        valid_sets=[val_data],\n        callbacks=[lgb.early_stopping(stopping_rounds=400, verbose=True)]\n    )\n    \n    # Dự đoán\n    train_pred_prob = model.predict(X_train_fold)\n    val_pred_prob = model.predict(X_val_fold)\n    \n    # Tính MAP@3\n    train_map3 = map_at_3(y_train_fold, train_pred_prob)\n    val_map3 = map_at_3(y_val_fold, val_pred_prob)\n    \n    train_map3_scores.append(train_map3)\n    val_map3_scores.append(val_map3)\n    \n    print(f\"Fold {fold} - Train MAP@3: {train_map3:.4f}, Val MAP@3: {val_map3:.4f}\")\n    \n    if val_map3 > best_val_map3:\n        best_val_map3 = val_map3\n        best_model = model\n    \n    fold += 1\n\n# Tính trung bình MAP@3\nmean_train_map3 = np.mean(train_map3_scores)\nmean_val_map3 = np.mean(val_map3_scores)\nprint(f\"\\nMean Train MAP@3: {mean_train_map3:.4f}\")\nprint(f\"Mean Val MAP@3: {mean_val_map3:.4f}\")\n\nprint('LightGBM training was completed!')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-04T12:46:23.838783Z","iopub.execute_input":"2025-06-04T12:46:23.839473Z","iopub.status.idle":"2025-06-04T12:46:24.46728Z","shell.execute_reply.started":"2025-06-04T12:46:23.839445Z","shell.execute_reply":"2025-06-04T12:46:24.466103Z"}},"outputs":[{"name":"stdout","text":"\nFold 1\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mLightGBMError\u001b[0m                             Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_35/515687472.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0;31m# Huấn luyện\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 62\u001b[0;31m     model = lgb.train(\n\u001b[0m\u001b[1;32m     63\u001b[0m         \u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m         \u001b[0mtrain_data\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/lightgbm/engine.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(params, train_set, num_boost_round, valid_sets, valid_names, feval, init_model, feature_name, categorical_feature, keep_training_booster, callbacks)\u001b[0m\n\u001b[1;32m    280\u001b[0m     \u001b[0;31m# construct booster\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    281\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 282\u001b[0;31m         \u001b[0mbooster\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBooster\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_set\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrain_set\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    283\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_valid_contain_train\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    284\u001b[0m             \u001b[0mbooster\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_train_data_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_data_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/lightgbm/basic.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, params, train_set, model_file, model_str)\u001b[0m\n\u001b[1;32m   3639\u001b[0m             \u001b[0mparams\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_set\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3640\u001b[0m             \u001b[0mparams_str\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_param_dict_to_str\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3641\u001b[0;31m             _safe_call(\n\u001b[0m\u001b[1;32m   3642\u001b[0m                 _LIB.LGBM_BoosterCreate(\n\u001b[1;32m   3643\u001b[0m                     \u001b[0mtrain_set\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_handle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/lightgbm/basic.py\u001b[0m in \u001b[0;36m_safe_call\u001b[0;34m(ret)\u001b[0m\n\u001b[1;32m    294\u001b[0m     \"\"\"\n\u001b[1;32m    295\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mret\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 296\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mLightGBMError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_LIB\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLGBM_GetLastError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"utf-8\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    297\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mLightGBMError\u001b[0m: No OpenCL device found"],"ename":"LightGBMError","evalue":"No OpenCL device found","output_type":"error"}],"execution_count":8},{"cell_type":"markdown","source":"# Prediction and Submission","metadata":{}},{"cell_type":"code","source":"# Predicting probability on test set using best model\ntest_pred_prob = best_model.predict(test_df)  # Dùng trực tiếp test_df, không cần DMatrix\n\n# Get the top 3 most probable labels for each sample\ntop_3_indices = np.argsort(test_pred_prob, axis=1)[:, -3:][:, ::-1] \n\n# Decode top 3 labels from number to original name (Fertilizer Name)\ntop_3_labels = []\nfor i in range(len(top_3_indices)):\n    labels = label_encoders[target_column].inverse_transform(top_3_indices[i])\n    # Kết hợp các nhãn thành một chuỗi, phân tách bằng dấu cách\n    top_3_labels.append(\" \".join(labels))\n\n# Tạo DataFrame submission\nsubmission_df = pd.DataFrame({\n    'id': test_ids,  # Sử dụng test_ids đã lưu trước đó\n    'Fertilizer Name': top_3_labels\n})\n\n# Lưu file submission\nsubmission_df.to_csv('submission.csv', index=False)\nprint(\"Submission file 'submission.csv' has been created!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-04T10:10:01.725337Z","iopub.execute_input":"2025-06-04T10:10:01.725888Z","iopub.status.idle":"2025-06-04T10:14:51.24612Z","shell.execute_reply.started":"2025-06-04T10:10:01.72584Z","shell.execute_reply":"2025-06-04T10:14:51.245489Z"}},"outputs":[{"name":"stdout","text":"Submission file 'submission.csv' has been created!\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"# Check submission\nprint(submission_df.head())\nprint(submission_df.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-04T10:15:07.226639Z","iopub.execute_input":"2025-06-04T10:15:07.227235Z","iopub.status.idle":"2025-06-04T10:15:07.23237Z","shell.execute_reply.started":"2025-06-04T10:15:07.227211Z","shell.execute_reply":"2025-06-04T10:15:07.231696Z"}},"outputs":[{"name":"stdout","text":"       id          Fertilizer Name\n0  750000       DAP 10-26-26 28-28\n1  750001  17-17-17 20-20 10-26-26\n2  750002         28-28 20-20 Urea\n3  750003    14-35-14 DAP 17-17-17\n4  750004     20-20 10-26-26 28-28\n(250000, 2)\n","output_type":"stream"}],"execution_count":24}]}